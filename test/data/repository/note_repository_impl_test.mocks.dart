// Mocks generated by Mockito 5.1.0 from annotations
// in my_note/test/data/repository/note_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_note/app/core/errors/failure.dart' as _i8;
import 'package:my_note/app/data/api/client.dart' as _i3;
import 'package:my_note/app/data/datasources/local/note_local_datasources.dart'
    as _i5;
import 'package:my_note/app/data/datasources/remote/note_remote_datasources.dart'
    as _i7;
import 'package:my_note/app/data/models/note_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNote_0 extends _i1.Fake implements _i2.Note {}

class _FakeAPIClient_1 extends _i1.Fake implements _i3.APIClient {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i4.Either<L, R> {}

/// A class which mocks [NoteLocalDatasources].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteLocalDatasources extends _i1.Mock
    implements _i5.NoteLocalDatasources {
  MockNoteLocalDatasources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> initDb() =>
      (super.noSuchMethod(Invocation.method(#initDb, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> addNewNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#addNewNote, [note]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> deleteDb() =>
      (super.noSuchMethod(Invocation.method(#deleteDb, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> deleteNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#deleteNote, [note]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<List<_i2.Note>> getNotes() =>
      (super.noSuchMethod(Invocation.method(#getNotes, []),
              returnValue: Future<List<_i2.Note>>.value(<_i2.Note>[]))
          as _i6.Future<List<_i2.Note>>);
  @override
  _i6.Future<_i2.Note> getNoteById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getNoteById, [id]),
              returnValue: Future<_i2.Note>.value(_FakeNote_0()))
          as _i6.Future<_i2.Note>);
  @override
  _i6.Future<bool> updateNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#updateNote, [note]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> checkSavedNote(_i2.Note? value) =>
      (super.noSuchMethod(Invocation.method(#checkSavedNote, [value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [NoteRemoteDatasources].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRemoteDatasources extends _i1.Mock
    implements _i7.NoteRemoteDatasources {
  MockNoteRemoteDatasources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.APIClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeAPIClient_1()) as _i3.APIClient);
  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> addNewNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#addNewNote, [note]),
              returnValue: Future<_i4.Either<_i8.Failure, bool>>.value(
                  _FakeEither_2<_i8.Failure, bool>()))
          as _i6.Future<_i4.Either<_i8.Failure, bool>>);
  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> deleteNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#deleteNote, [note]),
              returnValue: Future<_i4.Either<_i8.Failure, bool>>.value(
                  _FakeEither_2<_i8.Failure, bool>()))
          as _i6.Future<_i4.Either<_i8.Failure, bool>>);
  @override
  _i6.Future<_i4.Either<_i8.Failure, List<_i2.Note>>> getNotes() =>
      (super.noSuchMethod(Invocation.method(#getNotes, []),
          returnValue: Future<_i4.Either<_i8.Failure, List<_i2.Note>>>.value(
              _FakeEither_2<_i8.Failure, List<_i2.Note>>())) as _i6
          .Future<_i4.Either<_i8.Failure, List<_i2.Note>>>);
  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> updateNote(_i2.Note? note) =>
      (super.noSuchMethod(Invocation.method(#updateNote, [note]),
              returnValue: Future<_i4.Either<_i8.Failure, bool>>.value(
                  _FakeEither_2<_i8.Failure, bool>()))
          as _i6.Future<_i4.Either<_i8.Failure, bool>>);
  @override
  _i6.Future<_i4.Either<_i8.Failure, _i2.Note>> getNoteById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getNoteById, [id]),
              returnValue: Future<_i4.Either<_i8.Failure, _i2.Note>>.value(
                  _FakeEither_2<_i8.Failure, _i2.Note>()))
          as _i6.Future<_i4.Either<_i8.Failure, _i2.Note>>);
}
