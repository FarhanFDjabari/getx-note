// Mocks generated by Mockito 5.1.0 from annotations
// in my_note/test/domain/usecases/get_remote_note_by_id_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_note/app/core/errors/failure.dart' as _i6;
import 'package:my_note/app/data/models/note_model.dart' as _i3;
import 'package:my_note/app/domain/repositories/note_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeNote_1 extends _i1.Fake implements _i3.Note {}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i4.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> addNewRemoteNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#addNewRemoteNote, [note]),
              returnValue: Future<_i2.Either<_i6.Failure, bool>>.value(
                  _FakeEither_0<_i6.Failure, bool>()))
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
  @override
  _i5.Future<bool> addNewLocalNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#addNewLocalNote, [note]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> deleteRemoteNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#deleteRemoteNote, [note]),
              returnValue: Future<_i2.Either<_i6.Failure, bool>>.value(
                  _FakeEither_0<_i6.Failure, bool>()))
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
  @override
  _i5.Future<bool> deleteLocalNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#deleteLocalNote, [note]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> updateRemoteNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#updateRemoteNote, [note]),
              returnValue: Future<_i2.Either<_i6.Failure, bool>>.value(
                  _FakeEither_0<_i6.Failure, bool>()))
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
  @override
  _i5.Future<bool> updateLocalNote(_i3.Note? note) =>
      (super.noSuchMethod(Invocation.method(#updateLocalNote, [note]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Note>>> getRemoteNotes() =>
      (super.noSuchMethod(Invocation.method(#getRemoteNotes, []),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Note>>>.value(
              _FakeEither_0<_i6.Failure, List<_i3.Note>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i3.Note>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.Note>> getRemoteNoteById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getRemoteNoteById, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, _i3.Note>>.value(
                  _FakeEither_0<_i6.Failure, _i3.Note>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i3.Note>>);
  @override
  _i5.Future<_i3.Note> getLocalNoteById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getLocalNoteById, [id]),
              returnValue: Future<_i3.Note>.value(_FakeNote_1()))
          as _i5.Future<_i3.Note>);
}
